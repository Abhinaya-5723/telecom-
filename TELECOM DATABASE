// app.js

// --- [1] IMPORTS ---
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const path = require('path');

// --- [2] SETUP EXPRESS ---
const app = express();
app.use(bodyParser.json());
app.use(express.static('public'));
const PORT = 3000;
const SECRET_KEY = 'secret';

// --- [3] DATABASE SETUP ---
const db = new sqlite3.Database(':memory:'); // In-memory DB for demonstration

db.serialize(() => {
    db.run(`CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE,
        password TEXT,
        role TEXT
    )`);

    db.run(`CREATE TABLE products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        category TEXT,
        stock_level INTEGER,
        reorder_point INTEGER
    )`);

    db.run(`CREATE TABLE suppliers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        contact TEXT
    )`);

    db.run(`INSERT INTO users (email, password, role) VALUES (?, ?, ?)`, 
        ['admin@tims.com', bcrypt.hashSync('admin123', 8), 'Admin']);
});

// --- [4] AUTHENTICATION ROUTES ---
app.post('/api/login', (req, res) => {
    const { email, password } = req.body;
    db.get(`SELECT * FROM users WHERE email = ?`, [email], (err, user) => {
        if (!user || !bcrypt.compareSync(password, user.password)) {
            return res.status(400).json({ error: 'Invalid credentials' });
        }
        const token = jwt.sign({ id: user.id, role: user.role }, SECRET_KEY, { expiresIn: '1h' });
        res.json({ token });
    });
});

const authenticate = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(401).json({ error: 'Access Denied' });
    try {
        const verified = jwt.verify(token, SECRET_KEY);
        req.user = verified;
        next();
    } catch (err) {
        res.status(400).json({ error: 'Invalid Token' });
    }
};

// --- [5] PRODUCT ROUTES ---
app.get('/api/products', authenticate, (req, res) => {
    db.all(`SELECT * FROM products`, [], (err, products) => {
        res.json(products);
    });
});

app.post('/api/products', authenticate, (req, res) => {
    const { name, category, stock_level, reorder_point } = req.body;
    db.run(`INSERT INTO products (name, category, stock_level, reorder_point) VALUES (?, ?, ?, ?)`,
        [name, category, stock_level, reorder_point], (err) => {
            if (err) return res.status(400).json({ error: err.message });
            res.json({ message: 'Product added' });
        });
});

// --- [6] ALERTS (Simplified Example) ---
app.get('/api/alerts', authenticate, (req, res) => {
    db.all(`SELECT * FROM products WHERE stock_level <= reorder_point`, [], (err, alerts) => {
        res.json(alerts);
    });
});

// --- [7] FRONTEND (SERVED AS STATIC HTML) ---
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '/public/index.html'));
});

// --- [8] START SERVER ---
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

